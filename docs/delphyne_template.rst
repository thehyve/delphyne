Getting started with delphyne
=============================

.. contents::
    :local:
    :backlinks: none


Use with delphyne-template
--------------------------

delphyne is intended to be used with **delphyne-template**,
an ETL template for converting source data to the OMOP CDM.

delphyne-template complements delphyne's functionality by providing a project structure
that satisfies delphyne's assumptions regarding folders and scripts locations,
greatly simplifying the setup process. It also ensures the optimal use of the package
by providing a basic wrapper implementation, a customizable target CDM model, and sample configuration files
for database connection and source data loading, among other features.

Project setup
-------------

To get started, simply go to `delphyne-template on GitHub <https://github.com/thehyve/delphyne-template>`_,
and click on the "Use this template" button to create a new repository for your project.

Clone the project to a local environment where a delphyne-compatible Python version is available
(see :ref:`index:Requirements`), and install the dependencies:

.. code-block:: bash

   pip install -r requirements.txt

delphyne itself will be automatically installed as one of the dependencies.

Project structure overview
--------------------------

A project built on delphyne-template will be structured as follows:

::

    project_root/
    ├── config/
    ├── docs/
    ├── resources/
    │   ├── mapping_tables/
    │   ├── synthetic_data/
    │   └── vocabularies/
    │       ├── custom/
    │       ├── source_to_concept_map/
    │       └── standard/
    ├── src/
    │   ├── main/
    │   │   ├── python/
    │   │   │   ├── cdm/
    │   │   │   ├── transformation/
    │   │   │   ├── util/
    │   │   │   └── wrapper.py
    │   │   └── sql/
    │   └── test/
    └── main.py

The folders listed below are **required by delphyne** and should not be renamed or removed:

- **config**:
  configuration files for database connection and execution options, source data, and logging;
- **resources/vocabularies** (and sub-folders):
  expected location for standard OMOP vocabulary files, custom vocabularies, and source to concept mappings;
- **src**:
  ETL code and tests.

The following folders are provided for convenience and can be safely removed:

- **docs**:
  this is the place where you would typically place any ETL documentation,
  e.g. the mapping specifications markdown generated by `Rabbit in a Hat <http://ohdsi.github.io/WhiteRabbit/RabbitInAHat.html>`_;
- **resources/mapping_tables**:
  any mapping files, other than STCM mappings;
- **resources/synthetic_data**:
  any synthetic data used in the ETL development.

Running the ETL
---------------

Before you can run the ETL, you need to create a custom configuration file; see step 1 of `ETL setup`_.

.. code-block:: bash

   python main.py -c <path_to_config.yml>

A log of the ETL run will be written to ``logs/<timestamp><version>.log``.

Building the ETL
----------------

ETL development is an iterative process, and you will likely find yourself coming back to the same steps several times;
you should start with the ETL setup section as described, but other operations can be executed in any desired order.

ETL setup
^^^^^^^^^

1. Configure the database connection

2. Customize the target CDM model

3. Load the standard vocabularies

4. Configure the data sources (optional)

   Initially, these will be likely synthetic data; in that case, we recommend to store them in ``resources/synthetic_data``,
   and commit them to the repository, if not too large.

ETL development
^^^^^^^^^^^^^^^

5. Write the transformation scripts
   (python / sql) - any general purpose function can be added to util/

6. Specify the execution order of transformations in the wrapper run() method

7. Write tests
   python / R

8. Configure logging options
   if needed, edit logging configuration + write reports

Further development options:

9. Load custom vocabularies (optional)

10. Load source to concept mappings (optional)

ETL info
^^^^^^^^
- Replace the generic ``README.md`` with a project-specific version of ``README-sample.md``
- Make sure to regularly update your ETL version in ``main.py`` (``__version__`` is initially set to ``0.1.0``)
