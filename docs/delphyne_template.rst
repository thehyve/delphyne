Getting started with delphyne
=============================

.. contents::
    :local:
    :backlinks: none


Using delphyne-template
-----------------------

delphyne is intended to be used with **delphyne-template**,
an ETL template for converting source data to the OMOP CDM.

delphyne-template complements delphyne's functionality by providing a project structure
that satisfies delphyne's assumptions regarding folders and scripts locations,
greatly simplifying the setup process. It also ensures the optimal use of the package
by providing a basic wrapper implementation, a customizable target CDM model, and sample configuration files
for database connection and source data loading, among other features.

To get started, simply go to `delphyne-template on GitHub <https://github.com/thehyve/delphyne-template>`_,
and click on the "Use this template" button to create a new repository for your project.

Clone the project to a local environment where a delphyne-compatible Python version is available
(see :ref:`index:Requirements`), and install the dependencies:

.. code-block:: bash

   pip install -r requirements.txt

delphyne itself will be automatically installed as one of the dependencies
(typically, this will be the latest delphyne release available from PyPI).

Project structure overview
--------------------------

A project built on delphyne-template will be initially structured as follows:

::

    project_root/
    ├── config/
    ├── docs/
    ├── resources/
    │   ├── mapping_tables/
    │   ├── synthetic_data/
    │   └── vocabularies/
    ├── src/
    │   ├── main/
    │   │   ├── python/
    │   │   │   ├── cdm/
    │   │   │   ├── transformation/
    │   │   │   ├── util/
    │   │   │   └── wrapper.py
    │   │   └── sql/
    │   └── test/
    └── main.py

The folders listed below are **required by delphyne** and should not be renamed or removed:

- **config**:
  configuration files for database connection and general execution options, source data, and logging
- **resources/vocabularies**:
  expected location for standard OMOP vocabulary files, custom vocabularies, and STCM mappings
- **src**:
  ETL source code and tests

The following folders are provided for convenience and can be safely removed:

- **docs**:
  this is the place where you would typically place any ETL documentation,
  e.g. the mapping specifications markdown generated by `Rabbit in a Hat <http://ohdsi.github.io/WhiteRabbit/RabbitInAHat.html>`_
- **resources/mapping_tables**:
  any mapping files, other than STCM mappings
- **resources/synthetic_data**:
  any synthetic data used in the ETL development

Basic ETL setup
---------------

- configure connection to one of the supported DBMS (currently PostgreSQL)
- configure logging level
- customize target CDM model
- load standard vocabularies
- don't forget to update the project README file!

ETL customization
-----------------

At the very least, your ETL code would need to specify the target CDM model,
and define a subclass of delphyne's ``Wrapper`` that implements the ``run()`` method for executing transformations.


Implement a custom ETL.

- configure data sources (typically synthetic data) (optional)
- write transformation scripts (python / sql) - any general purpose function can be added to util/
- specify the execution order of transformations in the wrapper run() method
- load custom vocabularies (if any)
- load custom mappings (if any) - STCM or other
- write tests (R or Python)
- if needed, edit logging configuration + write reports

Running the ETL
---------------

Simply execute:

.. code-block:: bash

   python main.py -c <path_to_config.yml>

A log of the ETL run will be written to ``logs/<timestamp><version>.log``.
